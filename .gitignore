node_modules
// nunber
export default class Number {
    constructor(validators) {
        this.validators = [...validators]
    }
    isValid(value) {
        return this.validators.every((validator) => validator(value) === true);
    }
    even() {
        const validator = (value) => value % 2 === 0;
        return new Number([...this.validators, validator])
    }
    
    odd() {
        const validator = (value) => value % 2 !== 0;
        return new Number([...this.validators, validator])
    }
}
//array
export default class ArraySchema {
    constructor(validators) {
        this.validators = [...validators]
    }
    isValid(value) {
        return this.validators.every((validator) => validator(value) === true);
    }
    length(num) {
        const validator = (value) => (value !== null ? value.length === num : false);
        return new ArraySchema([...this.validators, validator]);
    }
}
//validator
export default class Validator {
    number(){
        const validator = (value) => typeof value === 'number';
        return new Number([validator]);
    }

    array() {
        const validator = (value) => Array.isArray(value);
        return new ArraySchema([validator]);
    }
}
constructor(vals) {
    this.validators = [...vals];
  }

  isValid(value) {
    return this.validators.every((validator) => validator(value) === true);
  }

  allIntegers() {
    const validator = (arr) => arr.every((item) => Number.isInteger(item));
    return new ArraySchema([...this.validators, validator]);
  }

  custom(val) {
    const validator = (arr) => arr.every((item) => val(item));
    return new ArraySchema([...this.validators, validator]);
  }
@@ -0,0 +1,14 @@
export default class StringSchema {
  constructor(vals) {
    this.validators = [...vals];
  }

  isValid(value) {
    return this.validators.every((validator) => validator(value) === true);
  }

  hasSpaces() {
    const validator = (string) => string.includes(' ');
    return new StringSchema([...this.validators, validator]);
  }
}
export default class FunctionSchema {
  constructor(validators, context = {}, expectedValue = null, args = []) {
    this.validators = validators;
    this.context = context;
    this.expectedValue = expectedValue;
    this.args = args;
  }

  isValid(value) {
    if (!this.expectedValue) {
      return this.validators.every((validator) => validator(value) === true);
    }
    return value.call(this.context, ...this.args) === this.expectedValue;
  }

  expect(value) {
    return new FunctionSchema(this.validators, this.context, value, this.args);
  }

  callWith(context) {
    return new FunctionSchema(this.validators, context, this.expectedValue, this.args);
  }

  arguments(...args) {
    return new FunctionSchema(this.validators, this.context, this.expectedValue, args);
  }
}
